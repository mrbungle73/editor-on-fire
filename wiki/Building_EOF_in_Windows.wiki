#summary Instructions for building EOF from source in a Windows environment.

= Introduction =

Building EOF from source is much more complicated than just running it, but it's the way to go if you want to try the latest revision.  It's also the only option if EOF binaries are not being released for your platform (Linux).  The steps for building on Non Windows platforms will likely be different, but should be at least similar.  Please send us your feedback for building on other platforms and we can try to make information available.

Note:  Certain new Linux distributions use Pulse Audio, which messes up the ability of software to use the ALSA sound driver.  If this is preventing sound from working once you build the program, the only workarounds we currently know of are for you to remove the Pulse Audio packages or try another distro.  Unfortunately, how Operating Systems handle their driver and how Allegro developers work around such problems are out of our control.


= Details =

==Building Allegro:==
First, you need to build Allegro itself, along with some other dependencies that EOF needs.  This procedure should work with version 4.4.1.1 of Allegro.  At this time EOF will NOT WORK with Allegro 5.  To build EOF from source, you will need:
  # MinGW (http://sourceforge.net/projects/mingw/)
  # Allegro source and a DirectX SDK (download from http://alleg.sourceforge.net/wip.html)
  # zlib and libpng (download from http://tjaden.strangesoft.net/loadpng/mingw.html)
  # libogg and libvorbis Vorbis packages (download from http://xiph.org/downloads)
  # MSYS (download from http://www.mingw.org/wiki/msys)
  # CMake (download from http://www.cmake.org/)

Get MinGW (http://sourceforge.net/projects/mingw/) and install it.  You can use this with many modern IDE's such as Dev-Cpp or CodeBlocks.  Since Dev-Cpp is end of development and has some unresolved bugs, I personally recommend CodeBlocks.  Installing MinGW to the root of a file system (ie. c:\mingw) will make things easier.  Ensure that MinGW's "bin" folder is in your PATH environment variable, so you can use gcc and mingw32-make from any current working directory.  Allegro in Windows requires a DirectX SDK.  Get one of them from http://alleg.sourceforge.net/wip.html.  Ie. download dx70_mgw.zip and extract its contents to your MinGW install path (ie. c:\mingw), allowing files to be overwritten.  This must be done in order for Allegro to build later.

Get the zlib and libpng packages (http://tjaden.strangesoft.net/loadpng/mingw.html).  Make sure they install to your MinGW installation directory and NOT to a subfolder, otherwise the source files won't get stored in the right folders and Allegro's CMake will not find them.

Get MSYS (http://www.mingw.org/wiki/msys).  MSYS 1.0.11 is an older version, but it works just fine and includes all parts in one installer, making it very easy to install.  Install it and give it the correct path to your MinGW installation directory.  Remember to use the forward slash / instead of backward slash \ between each directory.  Allow it to run the post install process.

Get the libogg and libvorbis Vorbis libraries (http://xiph.org/downloads).  Extract each someplace WITHOUT spaces in the folder path.  They will each be built using MSYS using the details below.  Libogg has to be built first.  If you extracted libogg to c:\libogg, launch MSYS, change to the right directory with:
{{{
cd /c/libogg
}}}
Run the configure script, specifying the path to your MinGW installation.  If MinGW was installed to C:\mingw, that makes it:
{{{
./configure --prefix=/c/mingw
make
make install
}}}
If you used the prefix correctly in the call to the configure script above, libogg will be properly built and the files will be correctly copied to within your MinGW folder.  Change directory to the extracted libvorbis files, for example:
{{{
cd /c/libvorbis
}}}
And run the same three commands in the same order:
{{{
./configure --prefix=/c/mingw
make
make install
}}}
Once all the above steps have been completed, the zlib, libpng, libogg and libvorbis dependencies will have been "built into" your MinGW installation.  That is all we need to use MSYS for, it can now be closed.  The rest of these steps will be done from the regular command window.

Get CMake (http://www.cmake.org).  Install it and ensure that CMake's "bin" folder is in your PATH environment variable, so you can call cmake from any current working directory.

Get Allegro's source (http://alleg.sourceforge.net/wip.html) and extract it someplace easy to get to (such as the root of a filesystem, such as c:\allegro).  Open a command shell, change to the Allegro directory, ie:
{{{
cd c:
c:\allegro
}}}
Usually, there won't be a build directory, so make one and change to it:
{{{
md build
cd build
}}}
Run CMake to create the appropriate makefiles and ensure dependencies are accounted for:
{{{
cmake -G "MinGW Makefiles" ..
}}}
Do include the two periods at the end, which refer cmake to the "CMakeLists.txt" file in the parent folder (c:\allegro).  This should create the files necessary in the build folder to build Allegro itself with make after this step is completed.  If you had tried to cmake Allegro before putting all of these dependencies in place, delete your "CMakeCache.txt" file and try cmake again.  If this CMakeCache.txt file is in the allegro folder or the allegro\build folder, make sure it's deleted, or else CMake won't put the files in the \build folder.  If you installed zlib and libpng to the correct directory, and built the vorbis files correctly, you should see that it says it found ZLIB, PNG and VORBIS among the other libraries that come with Allegro.

Now Allegro can be built.  This process will install files into your MinGW installation, allowing you to compile applications designed to use Allegro (such as EOF).  You will need to make sure that you have defined the MINGDIR environment variable to be set to the path of your MinGW installation, and MinGW's \bin\ folder should be in your PATH environment variable, or this next part might fail to work.  While still in Allegro's \build directory, run these commands:
{{{
mingw32-make
mingw32-make install
}}}

*Note:*
Some earlier versions of Allegro (ie. version 4.22) had some strange problems that would make Allegro fail to CMake and/or make.  Try the latest stable release, which fixes this problem.  Otherwise you may have to update part of the Allegro package (apparently binutils was the culprit).


==Building EOF:==
To build EOF, ensure that you have built Allegro and the other dependencies into your MinGW installation with the instructions given above.  If you are using Allegro 4.4 in Windows, I've found that it may have a different name for the main dll file (alleg.dll).  If so, you need to modify makefile.mingw so that the line that says "LIBS = -lalleg" is changed to "LIBS = -lalleg44.dll".  Before continuing, ensure that the folder containing the \src folder also contains a folder called "bin", or the make will fail.  To build EOF, change directory to EOF's \src folder and run "mingw32-make -f makefile.mingw"

Copy all other resources (graphics, audio files, etc) from the source distrubution to the \bin folder, where the newly-built eof.exe should be.  The program should be ready to use.

To build in an IDE instead, create a project and manually add the source files and settings from the makefile:
Code::Blocks instructions, in Windows (other OSs will require some different steps):
  # Create a new project, select console application, click Go.  Specify it as a C program.  Remove any default source files (main.c) that are added to the project automatically.
  # Examine the makefile and for each reference to some file file.o, it means that you have to add the appropriate source file to the project (file.c), so it will compile to file.o.  Make sure to pay attention to the paths indicated for each of the object files given.  CodeBlocks will allow you to add all C files within a folder and its subfolders, but some of the example source files in some of the third party modules EOF uses have main() functions declared, so you'd need to remove them from the project or you will have problems during the build process.
  # Include the file eof.rc to the project.  Code::Blocks should add this to a "Resources" folder in the project so that EOF's program icon can be properly set up.
  # Open the project's build options, and for the top item listed in the Project build options (should apply to any build targets you created for the project),
  # Open Linker Settings.  Under "Other Linker Options", add "-lalleg44.dll -logg -lvorbisfile -mwindows" without quotation marks.  This adds the required libraries and the necessary "mwindows" parameter required for building EOF in Windows.  Under "Search Directories", add the "...\alogg\include" (within \src directory in the EOF sources package)
  # Go to Project Properties>Build Targets tab>Output Filename and ensure that you specify where the executable file is placed, otherwise it could end up in some unknown location.